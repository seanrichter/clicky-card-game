{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Card/Card.js","components/Header/Header.js","components/Grid/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Card","style","backgroundImage","src","alt","onClick","handleClick","name","Header","id","score","Grid","state","playingCards","cardBlocks","resetGame","setState","handleCorrect","newplayingCards","shuffleArray","console","log","handleWrong","guessedCorrect","map","card","newPic","clicked","i","length","j","Math","floor","random","this","key","image","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6rCAIeA,EAFC,SAAAC,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAME,W,sBCY1CC,G,MAXF,SAAAH,GACT,OACI,yBACII,MAAO,CAACC,gBAAgB,OAAD,OAAQL,EAAMM,IAAd,MACvBC,IAAKP,EAAMO,IACXN,UAAU,QACVO,QAAS,kBAAMR,EAAMS,YAAYT,EAAMU,WCCpCC,G,MAPA,SAAAX,GAAK,OAChB,yBAAKY,GAAG,kBAAkBX,UAAU,aAChC,yBAAKW,GAAG,SAAR,oBACA,yBAAKA,GAAG,cAAR,qCACA,yBAAKA,GAAG,YAAR,UAA2BZ,EAAMa,UC8E1BC,E,2MA7EXC,MAAQ,CACJC,aAAcC,EACdJ,MAAO,G,EAGXK,UAAY,WACR,EAAKC,SAAS,CACVN,MAAO,EACPG,aAAcC,K,EAItBG,cAAgB,SAAAC,GACZ,EAAKF,SAAS,CACVH,aAAc,EAAKM,aAAaD,GAChCR,MAAO,EAAKE,MAAMF,MAAO,IAGJ,KAArB,EAAKE,MAAMF,QACX,EAAKK,YACLK,QAAQC,IAAI,c,EAKpBC,YAAc,WACV,EAAKP,a,EAGTT,YAAc,SAAAC,GACV,IAAIgB,GAAiB,EACfL,EAAkB,EAAKN,MAAMC,aAAaW,KAAI,SAAAC,GACjD,IAAMC,EAAM,eAAOD,GASnB,OARIC,EAAOnB,OAASA,IACZmB,EAAOC,UACPP,QAAQC,IAAI,+BACZK,EAAOC,SAAU,EACjBJ,GAAiB,IAIlBG,KAEXN,QAAQC,IAAI,oBAAqBE,GACjCA,EAAiB,EAAKN,cAAcC,GAAmB,EAAKI,YAAYJ,I,EAG3EC,aAAe,SAAAN,GACX,IAAK,IAAIe,EAAIf,EAAagB,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC9C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADI,EAET,CAACf,EAAaiB,GAAIjB,EAAae,IAAnEf,EAAae,GAFgC,KAE5Bf,EAAaiB,GAFe,KAIlD,OAAQjB,G,wEAGF,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,CAAQH,MAAOwB,KAAKtB,MAAMF,QAC1B,yBAAKZ,UAAU,eACX,yBAAKA,UAAU,QACdoC,KAAKtB,MAAMC,aAAaW,KAAI,SAAAC,GACrB,OAAQ,kBAAC,EAAD,CACRlB,KAAMkB,EAAKlB,KACX4B,IAAKV,EAAKlB,KACVD,YAAa,EAAKA,YAClBH,IAAKsB,EAAKW,MACVhC,IAAKqB,EAAKlB,iB,GApEnB8B,aCUJC,E,iLARX,OACE,kBAAC,EAAD,KACI,kBAAC,EAAD,W,GALQD,aCMEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.91de731d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => {\r\n    return(\r\n        <div\r\n            style={{backgroundImage:`url(${props.src})`}}\r\n            alt={props.alt}\r\n            className=\"block\"\r\n            onClick={() => props.handleClick(props.name)}>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n    <div id=\"headerContainer\" className=\"container\">\r\n        <div id=\"title\">Clicky Card Game</div>\r\n        <div id=\"directions\">Don't click the same image twice!</div>\r\n        <div id=\"scoreDiv\">Score: {props.score}</div>\r\n    </div>\r\n);\r\nexport default Header;","import React, {Component} from \"react\";\r\nimport \"./Grid.css\";\r\nimport cardBlocks from \"../../playingCards.json\";\r\nimport Card from \"../Card\";\r\nimport Header from \"../Header/Header\";\r\n\r\n\r\nclass Grid extends Component {\r\n    state = {\r\n        playingCards: cardBlocks,\r\n        score: 0\r\n    }\r\n\r\n    resetGame = () => {\r\n        this.setState({\r\n            score: 0,\r\n            playingCards: cardBlocks\r\n        })      \r\n    }\r\n\r\n    handleCorrect = newplayingCards => {\r\n        this.setState({\r\n            playingCards: this.shuffleArray(newplayingCards), \r\n            score: this.state.score +1,\r\n        });\r\n        \r\n        if (this.state.score === 11) {\r\n            this.resetGame();\r\n            console.log(\"You won!\");\r\n        }\r\n\r\n    };\r\n\r\n    handleWrong = () => {\r\n        this.resetGame();\r\n    };\r\n\r\n    handleClick = name => {\r\n        let guessedCorrect = false;\r\n        const newplayingCards = this.state.playingCards.map(card => {\r\n           const newPic = {...card};\r\n           if (newPic.name === name) {\r\n               if(!newPic.clicked){\r\n                   console.log(\"Already guessed------------\");\r\n                   newPic.clicked = true;\r\n                   guessedCorrect = true;\r\n               }\r\n               \r\n           }\r\n           return newPic;\r\n       })       \r\n       console.log(\"GUESSED CORRECT: \", guessedCorrect)\r\n       guessedCorrect ? this.handleCorrect(newplayingCards) : this.handleWrong(newplayingCards)\r\n    };\r\n\r\n    shuffleArray = playingCards => {\r\n        for (let i = playingCards.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [playingCards[i], playingCards[j]] = [playingCards[j], playingCards[i]];\r\n        }\r\n        return (playingCards);\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Header score={this.state.score}/>\r\n                <div className=\"gridWrapper\">\r\n                    <div className=\"grid\">\r\n                    {this.state.playingCards.map(card => {\r\n                            return (<Card \r\n                            name={card.name}\r\n                            key={card.name} \r\n                            handleClick={this.handleClick}\r\n                            src={card.image} \r\n                            alt={card.name}  \r\n                        />)\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div> \r\n        );\r\n    }\r\n};\r\n\r\nexport default Grid;","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Grid from \"./components/Grid/Grid\";\n\n\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <Wrapper>\n          <Grid />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}